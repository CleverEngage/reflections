When would you want to use a remote repository rather than keeping all your work
local?

    I will use a remote repository when I want to contribute with others, whether
    the project is public or private. Also, I will use it when I want to make
    a personal private repository and access it from different systems or locations.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Because:
    - Pulling the changes manually give me freedom to choose the right time that suit
    my works and not effect it.
    - I will not be interrupted in the middle of my coding, eg. to solve conflicts.
    - if there are a lot of changes, I will not bother by them. I can wait, then I may 
    pull a dozen of changes (commits) in one git command.
    - let me focus more in coding.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    - Branches are available in any repository (local, remote). I will use it when
    I want to do any changes to the repository without effecting  files in original
    branch.

    - Clone is a copy of existing repository. I will use it to copy a local repository
    to different directory or copy remote repository to local machine. And if I copy 
    a remote repository by git clone command, the git will set the remote URL for 
    me as origin.

    - Forks are a copy of existing repository in the GitHub from another user to my
    GitHub account. I will use it when I do not have permission to push changes to 
    other GitHub user repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    When latest of remote stored locally, Git can know if local repository 
    is up-to-date or if there are new commits in the master branch, and
    use it to make a merge either by fast-forward or by making new commit.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I think it will be difficult to collaborate without Git or GitHub. When I want
    to collaborate, I may need to make several copies of the project to experiment 
    something or create new feature in order to keep the original files save. Then,
    I may use my email to send information and files back and forth with my 
    collaborators. And I want to track project history in my own way. Later I have
    to decide which code are works best and which are not and add that change to my
    project.
    As a result, collaborating without Git and GitHub is difficult. And when the
    project becomes huge and has a lot of collaborators, the collaborating becomes
    too difficult and might be out of control.
    
    Before knowing Git and GitHub, I may think collaborating by email is an easy
    technique because I familiar with email. But, when I learn Git and GitHub and
    be familiar with them, I will become stronger and the collaborating will be 
    easy and under control.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I will use separate branches when I want to make experimental change, make new 
    feature, fix a bug, etc.

    Benefits:
        * master branch:
            - easy to update; by commit or push
            - no merge conflicts solving
        * separate branches:
            - flexibility; do experimental change or new feature and keep original files save
            - ask for advice or suggestions when collaborating
            - enhance the quality of the codes; the code will be merged into master when
            achieve the requirements
